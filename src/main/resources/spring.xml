<?xml version="1.0" encoding="UTF-8"?>

<!-- 配置xml需要的schema -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 扫描包下面的所有的类是否受spring的管理，需要spring创建对象 -->
	<context:component-scan
		base-package="org.apache.ftpserver.command.impl,com.exc_led.ftpserver">
		<!-- 不包含@Controller注解和@ControllerAdvice注解（配置全局异常处理的） （因为spring-mvc里面已经扫描并管理了，所以为了避免重复管理，应该排除） -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<context:property-placeholder location="classpath:config*.properties" />
	<!-- 配置数据库和连接池信息，使用config.properties里面的值 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据连接信息 -->
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}" />
		<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出 -->
		<!--SQLEXCEPTION，如果设置0，则无限等待。Default:0 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		<property name="mapperLocations"
			value="classpath:com/exc_led/ftpserver/model/mapper/*.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.exc_led.ftpserver.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 声明式事务配置 -->

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="myAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" /> -->
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP的规则 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut id="pc"
			expression="execution(* com.exc_led.ftpserver.biz.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="myAdvice" />
	</aop:config>

	<!--Jedis连接池的相关配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--新版是maxTotal，旧版是maxActive -->
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<!-- <property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}"/> -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.host}" />
		<constructor-arg name="port" value="${redis.port}"
			type="int" />
		<constructor-arg name="timeout" value="${redis.timeout}"
			type="int" />
		<constructor-arg name="password" value="${redis.password}" />
		<constructor-arg name="database" value="${redis.database}"
			type="int" />
	</bean>

	<!-- 扫描所有的controller -->
	<context:component-scan
		base-package="org.apache.ftpserver.command.impl,com.exc_led.ftpserver" />
	<!-- 使用默认的配置管理HandleMapping和HandleAdapter等， 即spring的核心处理机制，如果需要自定义，可以手动配置HandleMapping和HandleAdapter -->
	<mvc:annotation-driven />
	<!-- 不处理静态资源 -->
	<mvc:default-servlet-handler />
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
</beans>